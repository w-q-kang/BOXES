// read a (square) matrix and determine its determinant, input must be integer
box master array string
on start input.line var1 | partition.0.reverse vec var1 @space | set var1 1 | do getn off
on getn cond.int var1 * var1 == len | do.if check | ifnot | incr var1 | repeat off
on check cond.int var1 * var1 == len | send.if next 1 var1 vec | ifnot | print.nl matrix isnt square | stop off
end
box stack queue array int
// var1 = result, var4 = sign, var5 = runvar, var2/3 = help
on next set var1 0 | clear vec | append vec #* | qadd vec | set idy 1 | send process off
on process qget vec 1 | cond len == 3 | do.if one | ifnot | cond len == 6 | do.if square | ifnot | do other off
on one set var1 var1 + @1 * @3 | qdel 1 | cond qlen == 0 | send.ifnot process | if | send gather | break.next off
on square  set var1 var1 + @1 * ( @3 * @6 - @4 * @5 ) | qdel 1 | cond qlen == 0 | send.ifnot process | if | send gather | break.next off
on other save coeff @1 | save dim @2 | set.int var2 @2 - 1 | save dim1 var2 | set var4 1 | set var5 1 | send loopsub off
on loopsub qget vec 1 | delete.at vec 1 | delete.at vec 1 | set var3 @!var5 | impose $dim |  set idy 1 | delete.row vec |
set idx var5 | delete vec | 
set.int var2  var3 * $coeff * var4 | clear vec2 | append vec2 var2 $dim1 vec | 
// print.nl added var2 $dim1 vec | 
qadd vec2 | 
set.int var4 0 - var4 | incr var5 | cond.int var5  <= $dim | do.ifnot nextloop | if | repeat off
on nextloop qdel 1 | cond qlen == 0 | send.ifnot process | if | send gather | break.next off
on gather print.nl final result is var1 off
end
